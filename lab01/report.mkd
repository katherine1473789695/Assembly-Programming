# 实验1：Linux 编程基础实验
## 实验目的
1. 学会自己安装Linux系统
2. 学会配置简单的Linux开发环境
3. 在Linux下完成简单编程练习并熟悉各种命令行工具的使用方法
## 实验内容
### 1.Linux安装和配置
- 关于安装：因为我在课前安装了Ubuntu19.04真机，所以不再安装虚拟机，安装过程没有遇到什么问题。
- 查询命令：（以vim为例)  
在终端中使用 ```man vim``` 查看手册命令，搜索version， 找到如下说明  
![](file:///home/katherine/Pictures/Screenshot%20from%202019-07-01%2015-21-10.png)  
所以使用```--version```命令来查看vim版本，下面贴上vim/git/gcc/as/objdump/gdb版本截图  
![](file:///home/katherine/Pictures/Screenshot%20from%202019-07-01%2015-30-18.png)  
![](file:///home/katherine/Pictures/Screenshot%20from%202019-07-01%2015-33-15.png)  
### 2.Linux下的编程实践
- 修改后的代码为  
![](file:///home/katherine/Pictures/Screenshot%20from%202019-07-02%2000-04-09.png)
- 输出为  
![](file:///home/katherine/Pictures/Screenshot%20from%202019-07-02%2000-04-30.png)
### 3.熟悉工具
- 首先查阅ASCII码，0-9的十六进制分别为0x30-0x39  
![](file:///home/katherine/Pictures/Screenshot%20from%202019-07-02%2008-58-13.png)  
找到学号（181840326）的位置，是图中的31-36。根据我的代码推断0a是换行符。  
![](file:///home/katherine/Pictures/Screenshot%20from%202019-07-02%2009-00-10.png)  
- 编写简单的c语言源程序hello.c,并预处理、编译、汇编、链接。  
![](file:///home/katherine/Pictures/Screenshot%20from%202019-07-02%2009-19-53.png)
- 使vim支持显示行号
### 4.数据的表示范围及不同类型的数据长度实验
- 导出输出结果,发现当i为50000时结果变成了负数。
![](file:///home/katherine/Pictures/Screenshot%20from%202019-07-02%2015-04-41.png)  
原因是计算机的表示法是用有限数量的位来对一个数字编码，因此，当结果太大以至不能表示时，某些运算就会溢出。int型用四个字节表示，而50000*50000的结果超出了int 所能表示的范围。
- 在该程序中，int型能表示的最大数字是$$2^{31}-1=2147483647$$
要保证结果正确，i*i<=2147483647,i最大为46340
- 要保证结果都正确，只需将数据类型改为long long。  
![](file:///home/katherine/Pictures/Screenshot%20from%202019-07-02%2020-12-34.png)
### 5.矩阵运算执行时间比较
- 比较两个矩阵复制函数的执行时间
![](file:///home/katherine/Pictures/Screenshot%20from%202019-07-02%2020-40-55.png)
- 从程序的执行结果可以看出，第一种复制方法即copyij所用时间远小于copyji,即按行复制所用时间远小于按列复制。因为二维数组的本质是一维数组，其在内存中的存放是按照行存放的。copyij只需遍历内存一次便完成全部复制，而copyji每复制一次要跳过一行，大大增加了遍历内存的次数，故时间也大大增加。
### 选做：用git进行版本管理